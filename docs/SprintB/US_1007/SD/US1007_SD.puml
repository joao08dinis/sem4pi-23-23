@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor manager as "Manager"

participant ":UsersUI" as ui <<presentation>>
participant ":ImportStudentsAction" as action <<application>>
participant ":ImportStudentsUI" as registrationUI <<presentation>>
participant ":StudentRegistrationController" as controller <<application>>
participant ":AddUserController" as controllerAddUser <<application>>
participant ":ListUsersController" as controllerList <<application>>
participant ":ProfileController" as controllerProfile <<application>>
participant ":StudentRegistrationService" as service <<application>>
participant ":CourseService" as serviceCourse <<application>>
participant ":ProfileService" as serviceProfile <<application>>
participant "StudentRegistration" as studentRegistration <<domain>>
database ":StudentRegistrationRepository" as repository <<repository>>
database ":CourseRepository" as repositoryCourse <<repository>>
database ":ProfileRepository" as repositoryProfile <<repository>>

activate manager

manager -> ui : Asks to enroll students using a csv file
activate ui
ui -> action : execute()
activate action
action -> registrationUI : doShow()
deactivate action
deactivate ui
activate registrationUI
registrationUI --> manager : Asks for the path of the file with the students data
deactivate registrationUI
manager -> registrationUI : Writes path file
activate registrationUI
registrationUI -> registrationUI : importFile(filePath)
activate registrationUI
registrationUI -> registrationUI :status = Status.PENDING
activate registrationUI
deactivate registrationUI
registrationUI -> controller : getCourses()
activate controller
controller -> serviceCourse : getCourses()
activate serviceCourse
serviceCourse -> repositoryCourse : getAllCourses()
activate repositoryCourse
deactivate repositoryCourse
deactivate serviceCourse
deactivate controller
deactivate registrationUI
registrationUI -> manager : Shows all courses and request to choose one
deactivate registrationUI
manager -> registrationUI : Chooses course
activate registrationUI
registrationUI -> registrationUI : course = get(course)
activate registrationUI
registrationUI -> controller : List<StudentRegistration> studentRegistrationsByCourse = controller.getStudentRegistrationsByCourse(course)
activate controller
deactivate controller
alt course.getState().equals(State.OPEN)
    alt (course.getEnrollmentsState().equals(EnrollmentsState.OPEN))
        alt (!controller.hasRegentInCourse(course) && role.equals(Role.REGENT))
            loop while (fileScanner.hasNextLine())
                registrationUI -> registrationUI : Read File Data
                activate registrationUI
                deactivate registrationUI
                registrationUI -> registrationUI : final Set<Role> roles = new HashSet<>()
                activate registrationUI
                deactivate registrationUI
                registrationUI -> registrationUI : roles.add(BaseRoles.STUDENT)
                activate registrationUI
                deactivate registrationUI
                registrationUI -> registrationUI : SystemUser user = registerUser(username, password, firstName, lastName, email, roles)
                activate registrationUI
                registrationUI -> controllerAddUser : u = theController.addUser(username, password, firstName, lastName, email, roles)
                activate controllerAddUser
                deactivate controllerAddUser
                registrationUI -> controllerList : u = listUserController.find(Username.valueOf(username)).orElseThrow(() -> e)
                activate controllerList
                deactivate controllerList
                deactivate registrationUI
                registrationUI -> controllerProfile :  StudentProfile profile = (StudentProfile) profileController.createStudentProfile(user,null, taxPayerNumber, dateOfBirth, mecanographicNumber)
                activate controllerProfile
                controllerProfile -> serviceProfile : profileService.addNewProfile(profile)
                activate serviceProfile
                serviceProfile -> repositoryProfile : repository.save(profile)
                activate repositoryProfile
                deactivate repositoryProfile
                deactivate serviceProfile
                deactivate controllerProfile
                registrationUI -> controller :  newStudentRegistration = controller.addStudentRegistration(profile, status, course)
                activate controller
                controller -> studentRegistration : StudentRegistration.from(null,studentProfile,status, course)
                activate studentRegistration
                deactivate studentRegistration
                deactivate controller
                registrationUI -> controller : controller.saveStudentRegistration(newStudentRegistration)
                activate controller
                controller -> service : service.addNewStudentRegistration(studentRegistration)
                activate service
                service -> repository : repository.save(studentRegistration)
                activate repository
                deactivate repository
                deactivate service
                deactivate controller
                deactivate registrationUI
            end loop
        end
    end
end

registrationUI --> manager : informs operation success
deactivate registrationUI
deactivate manager


@enduml